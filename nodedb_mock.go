// Code generated by MockGen. DO NOT EDIT.
// Source: nodedb.go

// Package mock_iavl is a generated GoMock package.
package iavl

import (
	list "container/list"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	tm_db "github.com/tendermint/tm-db"
)

// MockNodeDB is a mock of NodeDB interface.
type MockNodeDB struct {
	ctrl     *gomock.Controller
	recorder *MockNodeDBMockRecorder
}

// MockNodeDBMockRecorder is the mock recorder for MockNodeDB.
type MockNodeDBMockRecorder struct {
	mock *MockNodeDB
}

// NewMockNodeDB creates a new mock instance.
func NewMockNodeDB(ctrl *gomock.Controller) *MockNodeDB {
	mock := &MockNodeDB{ctrl: ctrl}
	mock.recorder = &MockNodeDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNodeDB) EXPECT() *MockNodeDBMockRecorder {
	return m.recorder
}

// Commit mocks base method.
func (m *MockNodeDB) Commit() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit")
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockNodeDBMockRecorder) Commit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockNodeDB)(nil).Commit))
}

// DeleteFastNode mocks base method.
func (m *MockNodeDB) DeleteFastNode(key []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFastNode", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFastNode indicates an expected call of DeleteFastNode.
func (mr *MockNodeDBMockRecorder) DeleteFastNode(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFastNode", reflect.TypeOf((*MockNodeDB)(nil).DeleteFastNode), key)
}

// DeleteVersion mocks base method.
func (m *MockNodeDB) DeleteVersion(version int64, checkLatestVersion bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVersion", version, checkLatestVersion)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVersion indicates an expected call of DeleteVersion.
func (mr *MockNodeDBMockRecorder) DeleteVersion(version, checkLatestVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVersion", reflect.TypeOf((*MockNodeDB)(nil).DeleteVersion), version, checkLatestVersion)
}

// DeleteVersionsFrom mocks base method.
func (m *MockNodeDB) DeleteVersionsFrom(version int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVersionsFrom", version)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVersionsFrom indicates an expected call of DeleteVersionsFrom.
func (mr *MockNodeDBMockRecorder) DeleteVersionsFrom(version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVersionsFrom", reflect.TypeOf((*MockNodeDB)(nil).DeleteVersionsFrom), version)
}

// DeleteVersionsRange mocks base method.
func (m *MockNodeDB) DeleteVersionsRange(fromVersion, toVersion int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVersionsRange", fromVersion, toVersion)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVersionsRange indicates an expected call of DeleteVersionsRange.
func (mr *MockNodeDBMockRecorder) DeleteVersionsRange(fromVersion, toVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVersionsRange", reflect.TypeOf((*MockNodeDB)(nil).DeleteVersionsRange), fromVersion, toVersion)
}

// GetFastNode mocks base method.
func (m *MockNodeDB) GetFastNode(key []byte) (*FastNode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFastNode", key)
	ret0, _ := ret[0].(*FastNode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFastNode indicates an expected call of GetFastNode.
func (mr *MockNodeDBMockRecorder) GetFastNode(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFastNode", reflect.TypeOf((*MockNodeDB)(nil).GetFastNode), key)
}

// GetNode mocks base method.
func (m *MockNodeDB) GetNode(hash []byte) *Node {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNode", hash)
	ret0, _ := ret[0].(*Node)
	return ret0
}

// GetNode indicates an expected call of GetNode.
func (mr *MockNodeDBMockRecorder) GetNode(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNode", reflect.TypeOf((*MockNodeDB)(nil).GetNode), hash)
}

// Has mocks base method.
func (m *MockNodeDB) Has(hash []byte) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", hash)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Has indicates an expected call of Has.
func (mr *MockNodeDBMockRecorder) Has(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockNodeDB)(nil).Has), hash)
}

// HasRoot mocks base method.
func (m *MockNodeDB) HasRoot(version int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasRoot", version)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasRoot indicates an expected call of HasRoot.
func (mr *MockNodeDBMockRecorder) HasRoot(version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasRoot", reflect.TypeOf((*MockNodeDB)(nil).HasRoot), version)
}

// SaveBranch mocks base method.
func (m *MockNodeDB) SaveBranch(node *Node) []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveBranch", node)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// SaveBranch indicates an expected call of SaveBranch.
func (mr *MockNodeDBMockRecorder) SaveBranch(node interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveBranch", reflect.TypeOf((*MockNodeDB)(nil).SaveBranch), node)
}

// SaveEmptyRoot mocks base method.
func (m *MockNodeDB) SaveEmptyRoot(version int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveEmptyRoot", version)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveEmptyRoot indicates an expected call of SaveEmptyRoot.
func (mr *MockNodeDBMockRecorder) SaveEmptyRoot(version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveEmptyRoot", reflect.TypeOf((*MockNodeDB)(nil).SaveEmptyRoot), version)
}

// SaveFastNode mocks base method.
func (m *MockNodeDB) SaveFastNode(node *FastNode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveFastNode", node)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveFastNode indicates an expected call of SaveFastNode.
func (mr *MockNodeDBMockRecorder) SaveFastNode(node interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveFastNode", reflect.TypeOf((*MockNodeDB)(nil).SaveFastNode), node)
}

// SaveFastNodeNoCache mocks base method.
func (m *MockNodeDB) SaveFastNodeNoCache(node *FastNode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveFastNodeNoCache", node)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveFastNodeNoCache indicates an expected call of SaveFastNodeNoCache.
func (mr *MockNodeDBMockRecorder) SaveFastNodeNoCache(node interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveFastNodeNoCache", reflect.TypeOf((*MockNodeDB)(nil).SaveFastNodeNoCache), node)
}

// SaveNode mocks base method.
func (m *MockNodeDB) SaveNode(node *Node) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SaveNode", node)
}

// SaveNode indicates an expected call of SaveNode.
func (mr *MockNodeDBMockRecorder) SaveNode(node interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveNode", reflect.TypeOf((*MockNodeDB)(nil).SaveNode), node)
}

// SaveOrphans mocks base method.
func (m *MockNodeDB) SaveOrphans(version int64, orphans map[string]int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SaveOrphans", version, orphans)
}

// SaveOrphans indicates an expected call of SaveOrphans.
func (mr *MockNodeDBMockRecorder) SaveOrphans(version, orphans interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveOrphans", reflect.TypeOf((*MockNodeDB)(nil).SaveOrphans), version, orphans)
}

// SaveRoot mocks base method.
func (m *MockNodeDB) SaveRoot(root *Node, version int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveRoot", root, version)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveRoot indicates an expected call of SaveRoot.
func (mr *MockNodeDBMockRecorder) SaveRoot(root, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveRoot", reflect.TypeOf((*MockNodeDB)(nil).SaveRoot), root, version)
}

// String mocks base method.
func (m *MockNodeDB) String() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// String indicates an expected call of String.
func (mr *MockNodeDBMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockNodeDB)(nil).String))
}

// cacheFastNode mocks base method.
func (m *MockNodeDB) cacheFastNode(node *FastNode) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "cacheFastNode", node)
}

// cacheFastNode indicates an expected call of cacheFastNode.
func (mr *MockNodeDBMockRecorder) cacheFastNode(node interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "cacheFastNode", reflect.TypeOf((*MockNodeDB)(nil).cacheFastNode), node)
}

// cacheNode mocks base method.
func (m *MockNodeDB) cacheNode(node *Node) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "cacheNode", node)
}

// cacheNode indicates an expected call of cacheNode.
func (mr *MockNodeDBMockRecorder) cacheNode(node interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "cacheNode", reflect.TypeOf((*MockNodeDB)(nil).cacheNode), node)
}

// decrVersionReaders mocks base method.
func (m *MockNodeDB) decrVersionReaders(version int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "decrVersionReaders", version)
}

// decrVersionReaders indicates an expected call of decrVersionReaders.
func (mr *MockNodeDBMockRecorder) decrVersionReaders(version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "decrVersionReaders", reflect.TypeOf((*MockNodeDB)(nil).decrVersionReaders), version)
}

// deleteNodesFrom mocks base method.
func (m *MockNodeDB) deleteNodesFrom(version int64, hash []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "deleteNodesFrom", version, hash)
	ret0, _ := ret[0].(error)
	return ret0
}

// deleteNodesFrom indicates an expected call of deleteNodesFrom.
func (mr *MockNodeDBMockRecorder) deleteNodesFrom(version, hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "deleteNodesFrom", reflect.TypeOf((*MockNodeDB)(nil).deleteNodesFrom), version, hash)
}

// deleteOrphans mocks base method.
func (m *MockNodeDB) deleteOrphans(version int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "deleteOrphans", version)
	ret0, _ := ret[0].(error)
	return ret0
}

// deleteOrphans indicates an expected call of deleteOrphans.
func (mr *MockNodeDBMockRecorder) deleteOrphans(version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "deleteOrphans", reflect.TypeOf((*MockNodeDB)(nil).deleteOrphans), version)
}

// deleteRoot mocks base method.
func (m *MockNodeDB) deleteRoot(version int64, checkLatestVersion bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "deleteRoot", version, checkLatestVersion)
	ret0, _ := ret[0].(error)
	return ret0
}

// deleteRoot indicates an expected call of deleteRoot.
func (mr *MockNodeDBMockRecorder) deleteRoot(version, checkLatestVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "deleteRoot", reflect.TypeOf((*MockNodeDB)(nil).deleteRoot), version, checkLatestVersion)
}

// fastNodeKey mocks base method.
func (m *MockNodeDB) fastNodeKey(key []byte) []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "fastNodeKey", key)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// fastNodeKey indicates an expected call of fastNodeKey.
func (mr *MockNodeDBMockRecorder) fastNodeKey(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "fastNodeKey", reflect.TypeOf((*MockNodeDB)(nil).fastNodeKey), key)
}

// getBatch mocks base method.
func (m *MockNodeDB) getBatch() tm_db.Batch {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getBatch")
	ret0, _ := ret[0].(tm_db.Batch)
	return ret0
}

// getBatch indicates an expected call of getBatch.
func (mr *MockNodeDBMockRecorder) getBatch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getBatch", reflect.TypeOf((*MockNodeDB)(nil).getBatch))
}

// getDb mocks base method.
func (m *MockNodeDB) getDb() tm_db.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getDb")
	ret0, _ := ret[0].(tm_db.DB)
	return ret0
}

// getDb indicates an expected call of getDb.
func (mr *MockNodeDBMockRecorder) getDb() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getDb", reflect.TypeOf((*MockNodeDB)(nil).getDb))
}

// getFastIterator mocks base method.
func (m *MockNodeDB) getFastIterator(start, end []byte, ascending bool) (tm_db.Iterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getFastIterator", start, end, ascending)
	ret0, _ := ret[0].(tm_db.Iterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getFastIterator indicates an expected call of getFastIterator.
func (mr *MockNodeDBMockRecorder) getFastIterator(start, end, ascending interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getFastIterator", reflect.TypeOf((*MockNodeDB)(nil).getFastIterator), start, end, ascending)
}

// getFastNodeCache mocks base method.
func (m *MockNodeDB) getFastNodeCache() map[string]*list.Element {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getFastNodeCache")
	ret0, _ := ret[0].(map[string]*list.Element)
	return ret0
}

// getFastNodeCache indicates an expected call of getFastNodeCache.
func (mr *MockNodeDBMockRecorder) getFastNodeCache() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getFastNodeCache", reflect.TypeOf((*MockNodeDB)(nil).getFastNodeCache))
}

// getLatestVersion mocks base method.
func (m *MockNodeDB) getLatestVersion() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getLatestVersion")
	ret0, _ := ret[0].(int64)
	return ret0
}

// getLatestVersion indicates an expected call of getLatestVersion.
func (mr *MockNodeDBMockRecorder) getLatestVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getLatestVersion", reflect.TypeOf((*MockNodeDB)(nil).getLatestVersion))
}

// getOpts mocks base method.
func (m *MockNodeDB) getOpts() Options {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getOpts")
	ret0, _ := ret[0].(Options)
	return ret0
}

// getOpts indicates an expected call of getOpts.
func (mr *MockNodeDBMockRecorder) getOpts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getOpts", reflect.TypeOf((*MockNodeDB)(nil).getOpts))
}

// getPreviousVersion mocks base method.
func (m *MockNodeDB) getPreviousVersion(version int64) int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getPreviousVersion", version)
	ret0, _ := ret[0].(int64)
	return ret0
}

// getPreviousVersion indicates an expected call of getPreviousVersion.
func (mr *MockNodeDBMockRecorder) getPreviousVersion(version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getPreviousVersion", reflect.TypeOf((*MockNodeDB)(nil).getPreviousVersion), version)
}

// getRoot mocks base method.
func (m *MockNodeDB) getRoot(version int64) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getRoot", version)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getRoot indicates an expected call of getRoot.
func (mr *MockNodeDBMockRecorder) getRoot(version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getRoot", reflect.TypeOf((*MockNodeDB)(nil).getRoot), version)
}

// getRoots mocks base method.
func (m *MockNodeDB) getRoots() (map[int64][]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getRoots")
	ret0, _ := ret[0].(map[int64][]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getRoots indicates an expected call of getRoots.
func (mr *MockNodeDBMockRecorder) getRoots() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getRoots", reflect.TypeOf((*MockNodeDB)(nil).getRoots))
}

// getStorageVersion mocks base method.
func (m *MockNodeDB) getStorageVersion() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getStorageVersion")
	ret0, _ := ret[0].(string)
	return ret0
}

// getStorageVersion indicates an expected call of getStorageVersion.
func (mr *MockNodeDBMockRecorder) getStorageVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getStorageVersion", reflect.TypeOf((*MockNodeDB)(nil).getStorageVersion))
}

// hasUpgradedToFastStorage mocks base method.
func (m *MockNodeDB) hasUpgradedToFastStorage() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "hasUpgradedToFastStorage")
	ret0, _ := ret[0].(bool)
	return ret0
}

// hasUpgradedToFastStorage indicates an expected call of hasUpgradedToFastStorage.
func (mr *MockNodeDBMockRecorder) hasUpgradedToFastStorage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "hasUpgradedToFastStorage", reflect.TypeOf((*MockNodeDB)(nil).hasUpgradedToFastStorage))
}

// incrVersionReaders mocks base method.
func (m *MockNodeDB) incrVersionReaders(version int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "incrVersionReaders", version)
}

// incrVersionReaders indicates an expected call of incrVersionReaders.
func (mr *MockNodeDBMockRecorder) incrVersionReaders(version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "incrVersionReaders", reflect.TypeOf((*MockNodeDB)(nil).incrVersionReaders), version)
}

// leafNodes mocks base method.
func (m *MockNodeDB) leafNodes() ([]*Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "leafNodes")
	ret0, _ := ret[0].([]*Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// leafNodes indicates an expected call of leafNodes.
func (mr *MockNodeDBMockRecorder) leafNodes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "leafNodes", reflect.TypeOf((*MockNodeDB)(nil).leafNodes))
}

// nodeKey mocks base method.
func (m *MockNodeDB) nodeKey(hash []byte) []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "nodeKey", hash)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// nodeKey indicates an expected call of nodeKey.
func (mr *MockNodeDBMockRecorder) nodeKey(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "nodeKey", reflect.TypeOf((*MockNodeDB)(nil).nodeKey), hash)
}

// nodes mocks base method.
func (m *MockNodeDB) nodes() ([]*Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "nodes")
	ret0, _ := ret[0].([]*Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// nodes indicates an expected call of nodes.
func (mr *MockNodeDBMockRecorder) nodes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "nodes", reflect.TypeOf((*MockNodeDB)(nil).nodes))
}

// orphanKey mocks base method.
func (m *MockNodeDB) orphanKey(fromVersion, toVersion int64, hash []byte) []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "orphanKey", fromVersion, toVersion, hash)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// orphanKey indicates an expected call of orphanKey.
func (mr *MockNodeDBMockRecorder) orphanKey(fromVersion, toVersion, hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "orphanKey", reflect.TypeOf((*MockNodeDB)(nil).orphanKey), fromVersion, toVersion, hash)
}

// orphans mocks base method.
func (m *MockNodeDB) orphans() ([][]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "orphans")
	ret0, _ := ret[0].([][]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// orphans indicates an expected call of orphans.
func (mr *MockNodeDBMockRecorder) orphans() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "orphans", reflect.TypeOf((*MockNodeDB)(nil).orphans))
}

// resetBatch mocks base method.
func (m *MockNodeDB) resetBatch() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "resetBatch")
	ret0, _ := ret[0].(error)
	return ret0
}

// resetBatch indicates an expected call of resetBatch.
func (mr *MockNodeDBMockRecorder) resetBatch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "resetBatch", reflect.TypeOf((*MockNodeDB)(nil).resetBatch))
}

// resetLatestVersion mocks base method.
func (m *MockNodeDB) resetLatestVersion(version int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "resetLatestVersion", version)
}

// resetLatestVersion indicates an expected call of resetLatestVersion.
func (mr *MockNodeDBMockRecorder) resetLatestVersion(version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "resetLatestVersion", reflect.TypeOf((*MockNodeDB)(nil).resetLatestVersion), version)
}

// rootKey mocks base method.
func (m *MockNodeDB) rootKey(version int64) []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "rootKey", version)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// rootKey indicates an expected call of rootKey.
func (mr *MockNodeDBMockRecorder) rootKey(version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "rootKey", reflect.TypeOf((*MockNodeDB)(nil).rootKey), version)
}

// roots mocks base method.
func (m *MockNodeDB) roots() map[int64][]byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "roots")
	ret0, _ := ret[0].(map[int64][]byte)
	return ret0
}

// roots indicates an expected call of roots.
func (mr *MockNodeDBMockRecorder) roots() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "roots", reflect.TypeOf((*MockNodeDB)(nil).roots))
}

// saveFastNodeUnlocked mocks base method.
func (m *MockNodeDB) saveFastNodeUnlocked(node *FastNode, shouldAddToCache bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "saveFastNodeUnlocked", node, shouldAddToCache)
	ret0, _ := ret[0].(error)
	return ret0
}

// saveFastNodeUnlocked indicates an expected call of saveFastNodeUnlocked.
func (mr *MockNodeDBMockRecorder) saveFastNodeUnlocked(node, shouldAddToCache interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "saveFastNodeUnlocked", reflect.TypeOf((*MockNodeDB)(nil).saveFastNodeUnlocked), node, shouldAddToCache)
}

// saveOrphan mocks base method.
func (m *MockNodeDB) saveOrphan(hash []byte, fromVersion, toVersion int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "saveOrphan", hash, fromVersion, toVersion)
}

// saveOrphan indicates an expected call of saveOrphan.
func (mr *MockNodeDBMockRecorder) saveOrphan(hash, fromVersion, toVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "saveOrphan", reflect.TypeOf((*MockNodeDB)(nil).saveOrphan), hash, fromVersion, toVersion)
}

// saveRoot mocks base method.
func (m *MockNodeDB) saveRoot(hash []byte, version int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "saveRoot", hash, version)
	ret0, _ := ret[0].(error)
	return ret0
}

// saveRoot indicates an expected call of saveRoot.
func (mr *MockNodeDBMockRecorder) saveRoot(hash, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "saveRoot", reflect.TypeOf((*MockNodeDB)(nil).saveRoot), hash, version)
}

// setBatch mocks base method.
func (m *MockNodeDB) setBatch(batch tm_db.Batch) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "setBatch", batch)
}

// setBatch indicates an expected call of setBatch.
func (mr *MockNodeDBMockRecorder) setBatch(batch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "setBatch", reflect.TypeOf((*MockNodeDB)(nil).setBatch), batch)
}

// setDb mocks base method.
func (m *MockNodeDB) setDb(db tm_db.DB) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "setDb", db)
}

// setDb indicates an expected call of setDb.
func (mr *MockNodeDBMockRecorder) setDb(db interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "setDb", reflect.TypeOf((*MockNodeDB)(nil).setDb), db)
}

// setFastStorageVersionToBatch mocks base method.
func (m *MockNodeDB) setFastStorageVersionToBatch() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "setFastStorageVersionToBatch")
	ret0, _ := ret[0].(error)
	return ret0
}

// setFastStorageVersionToBatch indicates an expected call of setFastStorageVersionToBatch.
func (mr *MockNodeDBMockRecorder) setFastStorageVersionToBatch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "setFastStorageVersionToBatch", reflect.TypeOf((*MockNodeDB)(nil).setFastStorageVersionToBatch))
}

// setOpts mocks base method.
func (m *MockNodeDB) setOpts(options Options) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "setOpts", options)
}

// setOpts indicates an expected call of setOpts.
func (mr *MockNodeDBMockRecorder) setOpts(options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "setOpts", reflect.TypeOf((*MockNodeDB)(nil).setOpts), options)
}

// setStorageVersion mocks base method.
func (m *MockNodeDB) setStorageVersion(version string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "setStorageVersion", version)
}

// setStorageVersion indicates an expected call of setStorageVersion.
func (mr *MockNodeDBMockRecorder) setStorageVersion(version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "setStorageVersion", reflect.TypeOf((*MockNodeDB)(nil).setStorageVersion), version)
}

// shouldForceFastStorageUpgrade mocks base method.
func (m *MockNodeDB) shouldForceFastStorageUpgrade() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "shouldForceFastStorageUpgrade")
	ret0, _ := ret[0].(bool)
	return ret0
}

// shouldForceFastStorageUpgrade indicates an expected call of shouldForceFastStorageUpgrade.
func (mr *MockNodeDBMockRecorder) shouldForceFastStorageUpgrade() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "shouldForceFastStorageUpgrade", reflect.TypeOf((*MockNodeDB)(nil).shouldForceFastStorageUpgrade))
}

// size mocks base method.
func (m *MockNodeDB) size() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "size")
	ret0, _ := ret[0].(int)
	return ret0
}

// size indicates an expected call of size.
func (mr *MockNodeDBMockRecorder) size() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "size", reflect.TypeOf((*MockNodeDB)(nil).size))
}

// traverse mocks base method.
func (m *MockNodeDB) traverse(fn func([]byte, []byte) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "traverse", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// traverse indicates an expected call of traverse.
func (mr *MockNodeDBMockRecorder) traverse(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "traverse", reflect.TypeOf((*MockNodeDB)(nil).traverse), fn)
}

// traverseFastNodes mocks base method.
func (m *MockNodeDB) traverseFastNodes(fn func([]byte, []byte) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "traverseFastNodes", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// traverseFastNodes indicates an expected call of traverseFastNodes.
func (mr *MockNodeDBMockRecorder) traverseFastNodes(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "traverseFastNodes", reflect.TypeOf((*MockNodeDB)(nil).traverseFastNodes), fn)
}

// traverseNodes mocks base method.
func (m *MockNodeDB) traverseNodes(fn func([]byte, *Node) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "traverseNodes", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// traverseNodes indicates an expected call of traverseNodes.
func (mr *MockNodeDBMockRecorder) traverseNodes(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "traverseNodes", reflect.TypeOf((*MockNodeDB)(nil).traverseNodes), fn)
}

// traverseOrphans mocks base method.
func (m *MockNodeDB) traverseOrphans(fn func([]byte, []byte) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "traverseOrphans", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// traverseOrphans indicates an expected call of traverseOrphans.
func (mr *MockNodeDBMockRecorder) traverseOrphans(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "traverseOrphans", reflect.TypeOf((*MockNodeDB)(nil).traverseOrphans), fn)
}

// traverseOrphansVersion mocks base method.
func (m *MockNodeDB) traverseOrphansVersion(version int64, fn func([]byte, []byte) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "traverseOrphansVersion", version, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// traverseOrphansVersion indicates an expected call of traverseOrphansVersion.
func (mr *MockNodeDBMockRecorder) traverseOrphansVersion(version, fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "traverseOrphansVersion", reflect.TypeOf((*MockNodeDB)(nil).traverseOrphansVersion), version, fn)
}

// traversePrefix mocks base method.
func (m *MockNodeDB) traversePrefix(prefix []byte, fn func([]byte, []byte) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "traversePrefix", prefix, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// traversePrefix indicates an expected call of traversePrefix.
func (mr *MockNodeDBMockRecorder) traversePrefix(prefix, fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "traversePrefix", reflect.TypeOf((*MockNodeDB)(nil).traversePrefix), prefix, fn)
}

// traverseRange mocks base method.
func (m *MockNodeDB) traverseRange(start, end []byte, fn func([]byte, []byte) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "traverseRange", start, end, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// traverseRange indicates an expected call of traverseRange.
func (mr *MockNodeDBMockRecorder) traverseRange(start, end, fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "traverseRange", reflect.TypeOf((*MockNodeDB)(nil).traverseRange), start, end, fn)
}

// uncacheFastNode mocks base method.
func (m *MockNodeDB) uncacheFastNode(key []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "uncacheFastNode", key)
}

// uncacheFastNode indicates an expected call of uncacheFastNode.
func (mr *MockNodeDBMockRecorder) uncacheFastNode(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "uncacheFastNode", reflect.TypeOf((*MockNodeDB)(nil).uncacheFastNode), key)
}

// uncacheNode mocks base method.
func (m *MockNodeDB) uncacheNode(hash []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "uncacheNode", hash)
}

// uncacheNode indicates an expected call of uncacheNode.
func (mr *MockNodeDBMockRecorder) uncacheNode(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "uncacheNode", reflect.TypeOf((*MockNodeDB)(nil).uncacheNode), hash)
}

// updateLatestVersion mocks base method.
func (m *MockNodeDB) updateLatestVersion(version int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "updateLatestVersion", version)
}

// updateLatestVersion indicates an expected call of updateLatestVersion.
func (mr *MockNodeDBMockRecorder) updateLatestVersion(version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "updateLatestVersion", reflect.TypeOf((*MockNodeDB)(nil).updateLatestVersion), version)
}
